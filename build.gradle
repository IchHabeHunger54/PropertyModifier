//file:noinspection GroovyAssignabilityCheck
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${project.forgegradle_version}", changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: "${project.mixingradle_version}"
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'idea'

repositories {
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
}

group = "${project.mod_group}"
version = "${project.mc_version}-${project.mod_version}"
archivesBaseName = "${project.mod_id}"
java.toolchain.languageVersion = JavaLanguageVersion.of(project.java_version)

minecraft {
    mappings channel: "${project.mappings_channel}", version: "${project.mappings_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=${project.mod_id}.mixins.json"
            mods {
                propertymodifier {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=${project.mod_id}.mixins.json"
            mods {
                propertymodifier {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=${project.mod_id}.mixins.json"
            args "--mod", "${project.mod_id}", '--all', '--output', file('src/main/generated/'), '--existing', file('src/main/resources/')
            mods {
                propertymodifier {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/main/generated' }

dependencies {
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"
    annotationProcessor "org.spongepowered:mixin:${project.mixin_version}:processor"
    //compileOnly fg.deobf("mezz.jei:jei-${project.mc_version}:${project.jei_version}:api")
    //runtimeOnly fg.deobf("mezz.jei:jei-${project.mc_version}:${project.jei_version}")
}

processResources {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'mod_id': mod_id, 'mod_name': mod_name, 'mod_version': mod_version,
                'mod_url': mod_url, 'mod_updates': mod_updates,
                'mod_authors': mod_authors, 'mod_credits': mod_credits,
                'mod_description': mod_description, 'mod_logo': mod_logo,
                'mc_version_range': mc_version_range, 'forge_version_range': forge_version_range, 'loader_version_range': loader_version_range
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
    doLast {
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each {
            it.text = JsonOutput.toJson(new JsonSlurper().parse(it))
        }
    }
}

jar {
    manifest {
        mainAttributes(
                "Maven-Artifact": "${project.mod_group}:${project.archivesBaseName}:${project.version}",
                "Specification-Title": archivesBaseName,
                "Specification-Vendor": "${project.mod_authors}",
                "Specification-Version": "1",
                "Implementation-Title": "${archivesBaseName}",
                "Implementation-Version": "${project.mod_version}",
                "Implementation-Vendor": "${project.mod_authors}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                "Built-On": "${project.mc_version}-${project.forge_version}",
                "MixinConfigs": "${project.mod_id}.mixins.json"
        )
    }
}

jar.finalizedBy('reobfJar')

mixin {
    add sourceSets.main, "${project.mod_id}.refmap.json"
    config "${project.mod_id}.mixins.json"
}
